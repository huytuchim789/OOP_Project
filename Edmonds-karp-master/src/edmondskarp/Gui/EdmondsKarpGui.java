/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edmondskarp.Gui;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle;
import edmondskarp.Controller.EdmondsKarpController;
import edmondskarp.Model.Graph;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.HeadlessException;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.geom.Point2D;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.InputMap;
import javax.swing.JColorChooser;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.KeyStroke;
import org.json.JSONException;

public class EdmondsKarpGui extends javax.swing.JFrame implements Observer {

    private ArrayList<Circle> circles;
    private int MODE = 0;
    private boolean isSecond;
    private boolean isInDragging;
    private Circle shapeTmp;
    private final int DRAW = 0;
    private final int DRAG = 1;
    private final int ERASE = 3;
    private EdmondsKarpController controller;
    private static final EdmondsKarpGui gui = new EdmondsKarpGui();
    private Point2D pointTmp;
    private final JFileChooser chooser;

    private EdmondsKarpGui() {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EdmondsKarpGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EdmondsKarpGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EdmondsKarpGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EdmondsKarpGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        initComponents();
        this.addWindowListener(new WListener());
        setupUndoHotkeys();
        circles = new ArrayList<>();
        chooser = new JFileChooser();
        isSecond = false;
        isInDragging = false;
        pointTmp = new Point2D.Double();
    }

    public static EdmondsKarpGui getGui() {
        return gui;
    }

    public void setController(EdmondsKarpController controller) {
        this.controller = controller;
        controller.searchDefaultPreference();
        updatePrefMenu();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    // Generated using JFormDesigner Evaluation license - unknown
    private void initComponents() {
        jMenuBar1 = new JMenuBar();
        jMenu1 = new JMenu();
        jMenuItem5 = new JMenuItem();
        jMenuItem1 = new JMenuItem();
        jMenuItem4 = new JMenuItem();
        jMenuItemExit = new JMenuItem();
        jMenu2 = new JMenu();
        jMenuItemExample = new JMenuItem();
        jMenuItem10 = new JMenuItem();
        jMenu3 = new JMenu();
        jMenuItemAbout = new JMenuItem();
        jPanel1 = new JPanel();
        pencilButton = new JToggleButton();
        rubberButton = new JToggleButton();
        playButton = new JToggleButton();
        backButton = new JButton();
        forwardButton = new JButton();
        stopButton = new JButton();
        runButton = new JButton();
        jComboBox1 = new JComboBox<>();
        dragButton = new JToggleButton();
        undoButton = new JButton();
        redoButton = new JButton();
        residualButton = new JToggleButton();
        jLabelMin = new JLabel();
        jLabelMaxFlow = new JLabel();
        myPanel = new MyPanel(this);
        jPopupMenu1 = new JPopupMenu();
        jMenuItem2 = new JMenuItem();
        jMenuItem3 = new JMenuItem();
        jMenuItem6 = new JMenuItem();
        jPopupMenu2 = new JPopupMenu();
        jMenuItem7 = new JMenuItem();
        jMenuItem8 = new JMenuItem();
        jMenuItem9 = new JMenuItem();
        jDialog1 = new JDialog();
        jPanel2 = new JPanel();
        jLabel1 = new JLabel();
        jTextField2 = new JTextField();
        jButton2 = new JButton();
        jDialog2 = new JDialog();
        jTabbedPane2 = new JTabbedPane();
        jPanel3 = new JPanel();
        jTextField1 = new JTextField();
        jLabel2 = new JLabel();
        jLabel7 = new JLabel();
        jSliderPosText = new JSlider();
        jButtonSetDefCapacity = new JButton();
        jRadioButtonRandomCap = new JRadioButton();
        jRadioButtonDefaultCap = new JRadioButton();
        jPanel4 = new JPanel();
        jLabel3 = new JLabel();
        jLabel4 = new JLabel();
        jLabel5 = new JLabel();
        jLabel6 = new JLabel();
        jButtonDefaultColor = new JButton();
        jButtonAttraversatoColor = new JButton();
        jButtonSaturoColor = new JButton();
        jLabel11 = new JLabel();
        jButtonSelezionatoColor = new JButton();
        jPanel5 = new JPanel();
        jLabel8 = new JLabel();
        jComboBoxDimCircle = new JComboBox<>();
        jLabel9 = new JLabel();
        jComboBoxDimText = new JComboBox<>();
        StrokeCirclejSlider = new JSlider();
        StrokeArrowjSlider = new JSlider();
        jLabel10 = new JLabel();
        jLabel12 = new JLabel();

        //======== this ========
        setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        setBackground(Color.white);
        var contentPane = getContentPane();
        contentPane.setLayout(new BorderLayout());

        //======== jMenuBar1 ========
        {

            //======== jMenu1 ========
            {
                jMenu1.setText("File");
                jMenu1.setPreferredSize(new Dimension(50, 21));

                //---- jMenuItem5 ----
                jMenuItem5.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N, KeyEvent.CTRL_DOWN_MASK));
                jMenuItem5.setText("New");
                jMenuItem5.setPreferredSize(new Dimension(110, 25));
                jMenuItem5.addActionListener(e -> newActionPerformed(e));
                jMenu1.add(jMenuItem5);

                //---- jMenuItem1 ----
                jMenuItem1.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, KeyEvent.CTRL_DOWN_MASK));
                jMenuItem1.setText("Open");
                jMenuItem1.setPreferredSize(new Dimension(110, 25));
                jMenuItem1.addActionListener(e -> OpenActionPerformed(e));
                jMenu1.add(jMenuItem1);

                //---- jMenuItem4 ----
                jMenuItem4.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, KeyEvent.CTRL_DOWN_MASK));
                jMenuItem4.setText("Save");
                jMenuItem4.setPreferredSize(new Dimension(110, 25));
                jMenuItem4.addActionListener(e -> SaveActionPerformed(e));
                jMenu1.add(jMenuItem4);

                //---- jMenuItemExit ----
                jMenuItemExit.setText("Exit");
                jMenuItemExit.addActionListener(e -> jMenuItemExitActionPerformed(e));
                jMenu1.add(jMenuItemExit);
            }
            jMenuBar1.add(jMenu1);

            //======== jMenu2 ========
            {
                jMenu2.setText("Modify");
                jMenu2.setMaximumSize(new Dimension(70, 32767));
                jMenu2.setPreferredSize(new Dimension(90, 21));

                //---- jMenuItemExample ----
                jMenuItemExample.setText("example");
                jMenuItemExample.addActionListener(e -> jMenuItemExampleActionPerformed(e));
                jMenu2.add(jMenuItemExample);

                //---- jMenuItem10 ----
                jMenuItem10.setText("Preference");
                jMenuItem10.addActionListener(e -> preferenceActionPerformed(e));
                jMenu2.add(jMenuItem10);
            }
            jMenuBar1.add(jMenu2);

            //======== jMenu3 ========
            {
                jMenu3.setText("help");
                jMenu3.setPreferredSize(new Dimension(40, 21));

                //---- jMenuItemAbout ----
                jMenuItemAbout.setText("About");
                jMenuItemAbout.addActionListener(e -> jMenuItemAboutActionPerformed(e));
                jMenu3.add(jMenuItemAbout);
            }
            jMenuBar1.add(jMenu3);
        }
        setJMenuBar(jMenuBar1);

        //======== jPanel1 ========
        {
            jPanel1.setBackground(new Color(169, 169, 169));
            jPanel1.setPreferredSize(new Dimension(824, 50));
            jPanel1.setBorder (new javax. swing. border. CompoundBorder( new javax .swing .border .TitledBorder (new javax. swing.
            border. EmptyBorder( 0, 0, 0, 0) , "JF\u006frmDes\u0069gner \u0045valua\u0074ion", javax. swing. border. TitledBorder. CENTER
            , javax. swing. border. TitledBorder. BOTTOM, new java .awt .Font ("D\u0069alog" ,java .awt .Font
            .BOLD ,12 ), java. awt. Color. red) ,jPanel1. getBorder( )) ); jPanel1. addPropertyChangeListener (
            new java. beans. PropertyChangeListener( ){ @Override public void propertyChange (java .beans .PropertyChangeEvent e) {if ("\u0062order"
            .equals (e .getPropertyName () )) throw new RuntimeException( ); }} );

            //---- pencilButton ----
            pencilButton.setIcon(new ImageIcon(getClass().getResource("/edmondskarp/Gui/icon/draw.png")));
            pencilButton.setSelected(true);
            pencilButton.setToolTipText("draw");
            pencilButton.setFocusable(false);
            pencilButton.setHorizontalTextPosition(SwingConstants.CENTER);
            pencilButton.setMaximumSize(new Dimension(30, 30));
            pencilButton.setMinimumSize(new Dimension(24, 24));
            pencilButton.setName("");
            pencilButton.addActionListener(e -> pencilButtonActionPerformed(e));

            //---- rubberButton ----
            rubberButton.setIcon(new ImageIcon(getClass().getResource("/edmondskarp/Gui/icon/remove.png")));
            rubberButton.setToolTipText("erase");
            rubberButton.setFocusable(false);
            rubberButton.setHorizontalTextPosition(SwingConstants.CENTER);
            rubberButton.setMaximumSize(new Dimension(30, 30));
            rubberButton.setMinimumSize(new Dimension(24, 24));
            rubberButton.setName("");
            rubberButton.addActionListener(e -> rubberButtonActionPerformed(e));

            //---- playButton ----
            playButton.setIcon(new ImageIcon(getClass().getResource("/edmondskarp/Gui/icon/play.png")));
            playButton.setToolTipText("play");
            playButton.setFocusable(false);
            playButton.setHorizontalTextPosition(SwingConstants.CENTER);
            playButton.setMaximumSize(new Dimension(30, 30));
            playButton.setMinimumSize(new Dimension(24, 24));
            playButton.setName("");
            playButton.addActionListener(e -> playButtonActionPerformed(e));

            //---- backButton ----
            backButton.setIcon(new ImageIcon(getClass().getResource("/edmondskarp/Gui/icon/back 1.png")));
            backButton.setFocusable(false);
            backButton.addActionListener(e -> backButtonActionPerformed(e));

            //---- forwardButton ----
            forwardButton.setIcon(new ImageIcon(getClass().getResource("/edmondskarp/Gui/icon/forward 1.png")));
            forwardButton.setFocusable(false);
            forwardButton.addActionListener(e -> forwardButtonActionPerformed(e));

            //---- stopButton ----
            stopButton.setIcon(new ImageIcon(getClass().getResource("/edmondskarp/Gui/icon/square.png")));
            stopButton.setToolTipText("stop");
            stopButton.setFocusable(false);
            stopButton.addActionListener(e -> stopButtonActionPerformed(e));

            //---- runButton ----
            runButton.setText("Run");
            runButton.setToolTipText("stop");
            runButton.setFocusable(false);
            runButton.addActionListener(e -> runButtonActionPerformed(e));

            //---- jComboBox1 ----
            jComboBox1.setModel(new DefaultComboBoxModel<>(new String[] {
                "BFS",
                "DFS"
            }));
            jComboBox1.setFocusable(false);
            jComboBox1.addActionListener(e -> jComboBox1ActionPerformed(e));

            //---- dragButton ----
            dragButton.setIcon(new ImageIcon(getClass().getResource("/edmondskarp/Gui/icon/drag.png")));
            dragButton.setToolTipText("erase");
            dragButton.setFocusable(false);
            dragButton.setHorizontalTextPosition(SwingConstants.CENTER);
            dragButton.setMaximumSize(new Dimension(30, 30));
            dragButton.setMinimumSize(new Dimension(24, 24));
            dragButton.setName("");
            dragButton.addActionListener(e -> dragButtonActionPerformed(e));

            //---- undoButton ----
            undoButton.setIcon(new ImageIcon(getClass().getResource("/edmondskarp/Gui/icon/undo.png")));
            undoButton.setToolTipText("undo");
            undoButton.setFocusable(false);
            undoButton.addActionListener(e -> undoButtonActionPerformed(e));

            //---- redoButton ----
            redoButton.setIcon(new ImageIcon(getClass().getResource("/edmondskarp/Gui/icon/redo.png")));
            redoButton.setToolTipText("redo");
            redoButton.setFocusable(false);
            redoButton.addActionListener(e -> redoButtonActionPerformed(e));

            //---- residualButton ----
            residualButton.setText("Residuo");
            residualButton.setToolTipText("grafo residuo");
            residualButton.setFocusable(false);
            residualButton.setHorizontalTextPosition(SwingConstants.CENTER);
            residualButton.setMaximumSize(new Dimension(30, 30));
            residualButton.setMinimumSize(new Dimension(24, 24));
            residualButton.setName("");
            residualButton.addActionListener(e -> residualButtonActionPerformed(e));

            //---- jLabelMin ----
            jLabelMin.setFont(new Font("Ubuntu", Font.BOLD, 24));
            jLabelMin.setText("Min = 0");

            //---- jLabelMaxFlow ----
            jLabelMaxFlow.setFont(new Font("Ubuntu", Font.BOLD, 24));
            jLabelMaxFlow.setText("Flow = 0");

            GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
            jPanel1.setLayout(jPanel1Layout);
            jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup()
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(pencilButton, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rubberButton, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dragButton, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(undoButton, GroupLayout.PREFERRED_SIZE, 35, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(redoButton, GroupLayout.PREFERRED_SIZE, 35, GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(backButton, GroupLayout.PREFERRED_SIZE, 33, GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(playButton, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(forwardButton, GroupLayout.PREFERRED_SIZE, 33, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stopButton, GroupLayout.PREFERRED_SIZE, 33, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(runButton)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox1, GroupLayout.PREFERRED_SIZE, 103, GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(residualButton, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(jLabelMin)
                        .addGap(35, 35, 35)
                        .addComponent(jLabelMaxFlow)
                        .addContainerGap())
            );
            jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup()
                    .addGroup(GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                            .addComponent(stopButton, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(forwardButton, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(backButton, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(playButton, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rubberButton, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pencilButton, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(runButton, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(dragButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(undoButton, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(redoButton, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(residualButton, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBox1, GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelMaxFlow, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelMin, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(670, 670, 670))
            );
        }
        contentPane.add(jPanel1, BorderLayout.PAGE_START);

        //======== myPanel ========
        {
            myPanel.setBackground(Color.white);
            myPanel.setMaximumSize(new Dimension(1920, 1080));
            myPanel.setPreferredSize(new Dimension(800, 600));
            myPanel.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    myPanelMouseClicked(e);
                }
                @Override
                public void mouseReleased(MouseEvent e) {
                    myPanelMouseReleased(e);
                }
            });
            myPanel.addMouseMotionListener(new MouseMotionAdapter() {
                @Override
                public void mouseDragged(MouseEvent e) {
                    myPanelMouseDragged(e);
                }
            });

            GroupLayout myPanelLayout = new GroupLayout(myPanel);
            myPanel.setLayout(myPanelLayout);
            myPanelLayout.setHorizontalGroup(
                myPanelLayout.createParallelGroup()
                    .addGap(0, 971, Short.MAX_VALUE)
            );
            myPanelLayout.setVerticalGroup(
                myPanelLayout.createParallelGroup()
                    .addGap(0, 507, Short.MAX_VALUE)
            );
        }
        contentPane.add(myPanel, BorderLayout.CENTER);
        pack();
        setLocationRelativeTo(getOwner());

        //======== jPopupMenu1 ========
        {
            jPopupMenu1.setLightWeightPopupEnabled(false);
            jPopupMenu1.setMaximumSize(new Dimension(97, 54));
            jPopupMenu1.setMinimumSize(new Dimension(97, 54));

            //---- jMenuItem2 ----
            jMenuItem2.setText("Set source ");
            jMenuItem2.addActionListener(e -> setSourceActionPerformed(e));
            jPopupMenu1.add(jMenuItem2);

            //---- jMenuItem3 ----
            jMenuItem3.setText("Set Destination");
            jMenuItem3.addActionListener(e -> setSinkActionPerformed(e));
            jPopupMenu1.add(jMenuItem3);
            jPopupMenu1.addSeparator();

            //---- jMenuItem6 ----
            jMenuItem6.setText("Delete node ");
            jMenuItem6.addActionListener(e -> deleteNodeActionPerformed(e));
            jPopupMenu1.add(jMenuItem6);
        }

        //======== jPopupMenu2 ========
        {

            //---- jMenuItem7 ----
            jMenuItem7.setText("Set Capacity");
            jMenuItem7.addActionListener(e -> setCapacityActionPerformed(e));
            jPopupMenu2.add(jMenuItem7);

            //---- jMenuItem8 ----
            jMenuItem8.setText("Set flow ");
            jMenuItem8.addActionListener(e -> setFlowActionPerformed(e));
            jPopupMenu2.add(jMenuItem8);
            jPopupMenu2.addSeparator();

            //---- jMenuItem9 ----
            jMenuItem9.setText("Delete arc ");
            jMenuItem9.addActionListener(e -> deleteEdgeActionPerformed(e));
            jPopupMenu2.add(jMenuItem9);
        }

        //======== jDialog1 ========
        {
            jDialog1.setTitle("Enter the value ");
            var jDialog1ContentPane = jDialog1.getContentPane();

            //======== jPanel2 ========
            {
                jPanel2.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.TitledBorder(new javax
                .swing.border.EmptyBorder(0,0,0,0), "JF\u006frmDesi\u0067ner Ev\u0061luatio\u006e",javax.swing
                .border.TitledBorder.CENTER,javax.swing.border.TitledBorder.BOTTOM,new java.awt.
                Font("Dialo\u0067",java.awt.Font.BOLD,12),java.awt.Color.red
                ),jPanel2. getBorder()));jPanel2. addPropertyChangeListener(new java.beans.PropertyChangeListener(){@Override
                public void propertyChange(java.beans.PropertyChangeEvent e){if("borde\u0072".equals(e.getPropertyName(
                )))throw new RuntimeException();}});

                //---- jLabel1 ----
                jLabel1.setText("set capacity ");

                //---- jTextField2 ----
                jTextField2.setNextFocusableComponent(jButton2);

                //---- jButton2 ----
                jButton2.setText("Ok");
                jButton2.setFocusable(false);
                jButton2.addActionListener(e -> jButton2ActionPerformed(e));

                GroupLayout jPanel2Layout = new GroupLayout(jPanel2);
                jPanel2.setLayout(jPanel2Layout);
                jPanel2Layout.setHorizontalGroup(
                    jPanel2Layout.createParallelGroup()
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(jPanel2Layout.createParallelGroup()
                                .addComponent(jLabel1, GroupLayout.PREFERRED_SIZE, 139, GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(jTextField2, GroupLayout.PREFERRED_SIZE, 79, GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jButton2, GroupLayout.PREFERRED_SIZE, 70, GroupLayout.PREFERRED_SIZE)))
                            .addContainerGap(31, Short.MAX_VALUE))
                );
                jPanel2Layout.setVerticalGroup(
                    jPanel2Layout.createParallelGroup()
                        .addGroup(GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jLabel1, GroupLayout.PREFERRED_SIZE, 25, GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createParallelGroup()
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jButton2)
                                    .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jTextField2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addGap(25, 25, 25))))
                );
            }

            GroupLayout jDialog1ContentPaneLayout = new GroupLayout(jDialog1ContentPane);
            jDialog1ContentPane.setLayout(jDialog1ContentPaneLayout);
            jDialog1ContentPaneLayout.setHorizontalGroup(
                jDialog1ContentPaneLayout.createParallelGroup()
                    .addComponent(jPanel2, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            );
            jDialog1ContentPaneLayout.setVerticalGroup(
                jDialog1ContentPaneLayout.createParallelGroup()
                    .addComponent(jPanel2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
            );
        }

        //======== jDialog2 ========
        {
            jDialog2.setMinimumSize(new Dimension(341, 266));
            var jDialog2ContentPane = jDialog2.getContentPane();

            //======== jTabbedPane2 ========
            {
                jTabbedPane2.setMinimumSize(new Dimension(349, 304));

                //======== jPanel3 ========
                {
                    jPanel3.setMinimumSize(new Dimension(341, 266));
                    jPanel3.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.TitledBorder(new javax.swing.border.EmptyBorder(
                    0,0,0,0), "JF\u006frmD\u0065sig\u006eer \u0045val\u0075ati\u006fn",javax.swing.border.TitledBorder.CENTER,javax.swing.border.TitledBorder
                    .BOTTOM,new java.awt.Font("Dia\u006cog",java.awt.Font.BOLD,12),java.awt.Color.
                    red),jPanel3. getBorder()));jPanel3. addPropertyChangeListener(new java.beans.PropertyChangeListener(){@Override public void propertyChange(java.
                    beans.PropertyChangeEvent e){if("\u0062ord\u0065r".equals(e.getPropertyName()))throw new RuntimeException();}});

                    //---- jTextField1 ----
                    jTextField1.setEnabled(false);

                    //---- jLabel2 ----
                    jLabel2.setText("Capacit\u00e0 default");

                    //---- jLabel7 ----
                    jLabel7.setText("Posizione testo");

                    //---- jSliderPosText ----
                    jSliderPosText.setMaximum(150);
                    jSliderPosText.setMinimum(30);
                    jSliderPosText.addChangeListener(e -> jSliderPosTextStateChanged(e));

                    //---- jButtonSetDefCapacity ----
                    jButtonSetDefCapacity.setText("Set");
                    jButtonSetDefCapacity.addActionListener(e -> jButtonSetDefCapacityActionPerformed(e));

                    //---- jRadioButtonRandomCap ----
                    jRadioButtonRandomCap.setSelected(true);
                    jRadioButtonRandomCap.setText("Capcit\u00e0 random");
                    jRadioButtonRandomCap.addActionListener(e -> jRadioButtonRandomCapActionPerformed(e));

                    //---- jRadioButtonDefaultCap ----
                    jRadioButtonDefaultCap.setText("Capacit\u00e0 default");
                    jRadioButtonDefaultCap.addActionListener(e -> jRadioButtonDefaultCapActionPerformed(e));

                    GroupLayout jPanel3Layout = new GroupLayout(jPanel3);
                    jPanel3.setLayout(jPanel3Layout);
                    jPanel3Layout.setHorizontalGroup(
                        jPanel3Layout.createParallelGroup()
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel3Layout.createParallelGroup()
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField1, GroupLayout.PREFERRED_SIZE, 62, GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButtonSetDefCapacity, GroupLayout.PREFERRED_SIZE, 71, GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel7)
                                    .addComponent(jSliderPosText, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jRadioButtonRandomCap)
                                    .addComponent(jRadioButtonDefaultCap))
                                .addContainerGap(127, Short.MAX_VALUE))
                    );
                    jPanel3Layout.setVerticalGroup(
                        jPanel3Layout.createParallelGroup()
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(jRadioButtonRandomCap)
                                .addGap(18, 18, 18)
                                .addComponent(jRadioButtonDefaultCap)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2, GroupLayout.PREFERRED_SIZE, 28, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField1)
                                    .addComponent(jButtonSetDefCapacity))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel7)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSliderPosText, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(62, Short.MAX_VALUE))
                    );
                }
                jTabbedPane2.addTab("Generale", jPanel3);

                //======== jPanel4 ========
                {
                    jPanel4.setMinimumSize(new Dimension(341, 266));

                    //---- jLabel3 ----
                    jLabel3.setFont(new Font("Ubuntu", Font.BOLD, 15));
                    jLabel3.setText("Arco");

                    //---- jLabel4 ----
                    jLabel4.setText("default");

                    //---- jLabel5 ----
                    jLabel5.setText("attraversato");

                    //---- jLabel6 ----
                    jLabel6.setText("saturo");

                    //---- jButtonDefaultColor ----
                    jButtonDefaultColor.addActionListener(e -> defaultColorActionPerformed(e));

                    //---- jButtonAttraversatoColor ----
                    jButtonAttraversatoColor.addActionListener(e -> attraversatoColorActionPerformed(e));

                    //---- jButtonSaturoColor ----
                    jButtonSaturoColor.addActionListener(e -> saturoColorActionPerformed(e));

                    //---- jLabel11 ----
                    jLabel11.setText("selezionato");

                    //---- jButtonSelezionatoColor ----
                    jButtonSelezionatoColor.addActionListener(e -> selezionatoColorActionPerformed(e));

                    GroupLayout jPanel4Layout = new GroupLayout(jPanel4);
                    jPanel4.setLayout(jPanel4Layout);
                    jPanel4Layout.setHorizontalGroup(
                        jPanel4Layout.createParallelGroup()
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel4Layout.createParallelGroup()
                                    .addComponent(jLabel3)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGroup(jPanel4Layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jLabel4, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel5, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel6, GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel11, GroupLayout.Alignment.LEADING))
                                        .addGap(23, 23, 23)
                                        .addGroup(jPanel4Layout.createParallelGroup()
                                            .addComponent(jButtonSaturoColor, GroupLayout.PREFERRED_SIZE, 58, GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jButtonAttraversatoColor, GroupLayout.PREFERRED_SIZE, 58, GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jButtonSelezionatoColor, GroupLayout.PREFERRED_SIZE, 58, GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jButtonDefaultColor, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 58, GroupLayout.PREFERRED_SIZE))))
                                .addContainerGap(227, Short.MAX_VALUE))
                    );
                    jPanel4Layout.setVerticalGroup(
                        jPanel4Layout.createParallelGroup()
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel3, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel4Layout.createParallelGroup()
                                    .addComponent(jLabel4, GroupLayout.PREFERRED_SIZE, 24, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButtonDefaultColor, GroupLayout.PREFERRED_SIZE, 24, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel5, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButtonAttraversatoColor, GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButtonSaturoColor, GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                                    .addComponent(jLabel6, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButtonSelezionatoColor, GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                                    .addComponent(jLabel11, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(128, 128, 128))
                    );
                }
                jTabbedPane2.addTab("Colori", jPanel4);

                //======== jPanel5 ========
                {
                    jPanel5.setMinimumSize(new Dimension(341, 266));

                    //---- jLabel8 ----
                    jLabel8.setText("Circonferenza nodi");

                    //---- jComboBoxDimCircle ----
                    jComboBoxDimCircle.setModel(new DefaultComboBoxModel<>(new String[] {
                        "25",
                        "30",
                        "35",
                        "40",
                        "45",
                        "50",
                        "55",
                        "60",
                        "65"
                    }));
                    jComboBoxDimCircle.setToolTipText("");
                    jComboBoxDimCircle.addActionListener(e -> jComboBoxDimCircleActionPerformed(e));

                    //---- jLabel9 ----
                    jLabel9.setText("Testo");

                    //---- jComboBoxDimText ----
                    jComboBoxDimText.setModel(new DefaultComboBoxModel<>(new String[] {
                        "10",
                        "12",
                        "14",
                        "16",
                        "18",
                        "20",
                        "22",
                        "24",
                        "26",
                        "28",
                        "30"
                    }));
                    jComboBoxDimText.setSelectedIndex(3);
                    jComboBoxDimText.addActionListener(e -> DimTextActionPerformed(e));

                    //---- StrokeCirclejSlider ----
                    StrokeCirclejSlider.setMaximum(60);
                    StrokeCirclejSlider.setMinimum(1);
                    StrokeCirclejSlider.setPaintLabels(true);
                    StrokeCirclejSlider.setPaintTicks(true);
                    StrokeCirclejSlider.setValue(10);
                    StrokeCirclejSlider.addChangeListener(e -> StrokeCirclejSliderStateChanged(e));

                    //---- StrokeArrowjSlider ----
                    StrokeArrowjSlider.setMaximum(60);
                    StrokeArrowjSlider.setMinimum(1);
                    StrokeArrowjSlider.setPaintLabels(true);
                    StrokeArrowjSlider.setPaintTicks(true);
                    StrokeArrowjSlider.setValue(10);
                    StrokeArrowjSlider.addChangeListener(e -> StrokeArrowjSliderStateChanged(e));

                    //---- jLabel10 ----
                    jLabel10.setText("Linea Nodi");

                    //---- jLabel12 ----
                    jLabel12.setText("Linea Archi");

                    GroupLayout jPanel5Layout = new GroupLayout(jPanel5);
                    jPanel5.setLayout(jPanel5Layout);
                    jPanel5Layout.setHorizontalGroup(
                        jPanel5Layout.createParallelGroup()
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel5Layout.createParallelGroup()
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                                        .addGroup(jPanel5Layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jComboBoxDimText, GroupLayout.Alignment.LEADING)
                                            .addComponent(jComboBoxDimCircle, GroupLayout.Alignment.LEADING))
                                        .addGap(154, 154, 154))
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addGroup(jPanel5Layout.createParallelGroup()
                                            .addComponent(jLabel9, GroupLayout.PREFERRED_SIZE, 41, GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel5Layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                                                .addGroup(GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                                                    .addComponent(jLabel10)
                                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(StrokeCirclejSlider, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                                .addGroup(GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                                                    .addComponent(jLabel12)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(StrokeArrowjSlider, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))))
                                        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    );
                    jPanel5Layout.setVerticalGroup(
                        jPanel5Layout.createParallelGroup()
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel5Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel8, GroupLayout.PREFERRED_SIZE, 28, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBoxDimCircle))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel5Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel9, GroupLayout.PREFERRED_SIZE, 28, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBoxDimText))
                                .addGap(30, 30, 30)
                                .addGroup(jPanel5Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                    .addComponent(StrokeCirclejSlider, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel10, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(27, 27, 27)
                                .addGroup(jPanel5Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                    .addComponent(StrokeArrowjSlider, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel12, GroupLayout.PREFERRED_SIZE, 54, GroupLayout.PREFERRED_SIZE))
                                .addGap(27, 27, 27))
                    );
                }
                jTabbedPane2.addTab("Dimensioni", jPanel5);
            }

            GroupLayout jDialog2ContentPaneLayout = new GroupLayout(jDialog2ContentPane);
            jDialog2ContentPane.setLayout(jDialog2ContentPaneLayout);
            jDialog2ContentPaneLayout.setHorizontalGroup(
                jDialog2ContentPaneLayout.createParallelGroup()
                    .addComponent(jTabbedPane2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            );
            jDialog2ContentPaneLayout.setVerticalGroup(
                jDialog2ContentPaneLayout.createParallelGroup()
                    .addComponent(jTabbedPane2, GroupLayout.PREFERRED_SIZE, 288, GroupLayout.PREFERRED_SIZE)
            );
        }
    }// </editor-fold>//GEN-END:initComponents

    private void myPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_myPanelMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON1) {

            if (MODE == ERASE) {
                eraseShape(evt.getPoint());
            } else if (MODE == DRAW) {

                if (isSecond) {
                    Circle circ = getSelectedCircle(evt.getPoint());
                    if (circ != null && circ != shapeTmp) {
                        addArrow(circ);
                        shapeTmp.setSelect(false);
                        isSecond = false;
                        update();
                        return;
                    }
                } else {
                    Circle circ = getSelectedCircle(evt.getPoint());
                    if (circ != null) {
                        shapeTmp = circ;
                        shapeTmp.setSelect(true);
                        isSecond = true;
                        update();
                        return;
                    }

                }

                if (getSelectedCircle(evt.getPoint()) == null && !isSecond) {
                    addCircle(evt.getPoint());
                } else {
                    isSecond = false;
                    shapeTmp.setSelect(false);
                    update();
                }
            }
        } else if (evt.getButton() == MouseEvent.BUTTON3) {
            if (getSelectedCircle(evt.getPoint()) != null) {
                pointTmp.setLocation(evt.getPoint().getX(), evt.getPoint().getY());
                jPopupMenu1.show(myPanel, evt.getX(), evt.getY());
            } else if (getSelectedArrow(evt.getPoint()) != null) {
                pointTmp.setLocation(evt.getPoint().getX(), evt.getPoint().getY());
                jPopupMenu2.show(myPanel, evt.getX(), evt.getY());
            }
        }
    }//GEN-LAST:event_myPanelMouseClicked

    private void myPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_myPanelMouseDragged
        if (MODE == DRAG) {
            if (!isInDragging) {

                if (shapeTmp != null) {
                    shapeTmp.setSelect(false);
                    isSecond = false;
                }

                shapeTmp = getSelectedCircle(evt.getPoint());
                if (shapeTmp != null) {
                    shapeTmp.setFirstPoint(evt.getPoint());
                    shapeTmp.needUpdate();
                    isInDragging = true;

                } else {
                    // addCircle(evt.getPoint());
                    isInDragging = false;
                    shapeTmp = null;
                }

            } else {
                shapeTmp.setFirstPoint(evt.getPoint());
                shapeTmp.needUpdate();
                shapeTmp.updateArrow();
                update();
            }
        }

    }//GEN-LAST:event_myPanelMouseDragged

    private void myPanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_myPanelMouseReleased
        if (isInDragging) {
            isInDragging = false;
            controller.saveState();
        }
    }//GEN-LAST:event_myPanelMouseReleased

    private void pencilButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pencilButtonActionPerformed
        // TODO add your handling code here:
        rubberButton.setSelected(false);
        dragButton.setSelected(false);
        MODE = DRAW;
    }//GEN-LAST:event_pencilButtonActionPerformed

    private void rubberButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rubberButtonActionPerformed
        // TODO add your handling code here:
        pencilButton.setSelected(false);
        dragButton.setSelected(false);
        MODE = ERASE;
    }//GEN-LAST:event_rubberButtonActionPerformed

    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        // TODO add your handling code here:
        controller.play();
    }//GEN-LAST:event_playButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        // TODO add your handling code here:
        playButton.setSelected(false);
        controller.stop();
        jLabelMin.setText("Min = 0");
        jLabelMaxFlow.setText("Flow = 0");
    }//GEN-LAST:event_stopButtonActionPerformed

    private void setSourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setSourceActionPerformed
        // TODO add your handling code here:
        controller.setSource(getSelectedCircle(pointTmp));
    }//GEN-LAST:event_setSourceActionPerformed

    private void setSinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setSinkActionPerformed
        // TODO add your handling code here:
        controller.setSink(getSelectedCircle(pointTmp));
    }//GEN-LAST:event_setSinkActionPerformed

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        // TODO add your handling code here:
        controller.run();
    }//GEN-LAST:event_runButtonActionPerformed

    private void forwardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forwardButtonActionPerformed
        // TODO add your handling code here:
        controller.oneStepForward();
    }//GEN-LAST:event_forwardButtonActionPerformed

    private void OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenActionPerformed
        try {
            controller.open(openGraph());
        } catch (JSONException ex) {
            Logger.getLogger(EdmondsKarpGui.class.getName()).log(Level.SEVERE, null, ex);
        }
        update();
    }//GEN-LAST:event_OpenActionPerformed

    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
        saveGraph();
    }//GEN-LAST:event_SaveActionPerformed

    private void newActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newActionPerformed
        // TODO add your handling code here:
        controller.newGraph();
        controller.saveState();
    }//GEN-LAST:event_newActionPerformed

    private void deleteNodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteNodeActionPerformed
        // TODO add your handling code here:
        eraseCircle(getSelectedCircle(pointTmp));
    }//GEN-LAST:event_deleteNodeActionPerformed

    private void setCapacityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setCapacityActionPerformed
        // TODO add your handling code here:
        jLabel1.setText("Set capacity");
        jTextField2.setText("");
        jDialog1.setVisible(true);
        jDialog1.setLocation((int) pointTmp.getX(), (int) pointTmp.getY());
        jDialog1.pack();
    }//GEN-LAST:event_setCapacityActionPerformed

    private void setFlowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setFlowActionPerformed
        // TODO add your handling code here:
        jLabel1.setText("Set flow");
        jTextField2.setText("");
        jDialog1.setVisible(true);
        jDialog1.setLocation((int) pointTmp.getX(), (int) pointTmp.getY());
        jDialog1.pack();
    }//GEN-LAST:event_setFlowActionPerformed

    private void deleteEdgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteEdgeActionPerformed
        // TODO add your handling code here:
        eraseArrow(getSelectedArrow(pointTmp));
    }//GEN-LAST:event_deleteEdgeActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if (!jTextField2.getText().equals("")) {
            if (jLabel1.getText().equals("Set capacity")) {
                Arrow arrow = getSelectedArrow(pointTmp);
                int edge = arrow.getSelectedEdge(pointTmp);
                int capacity = 0;
                try {
                    capacity = Integer.parseInt(jTextField2.getText());
                } catch (NumberFormatException numberFormatException) {
                    displayMessage("Error: Please enter a numeric value\n");
                    return;
                }
                controller.setCapacity(arrow, capacity, edge);

            } else {
                Arrow arrow = getSelectedArrow(pointTmp);
                int edge = arrow.getSelectedEdge(pointTmp);
                int flow = 0;
                try {
                    flow = Integer.parseInt(jTextField2.getText());
                } catch (NumberFormatException numberFormatException) {
                    displayMessage("Error: Please enter a numeric value\n");
                    return;
                }
                controller.setFlow(arrow, flow, edge);
            }
            update();
        }
        jDialog1.setVisible(false);

    }//GEN-LAST:event_jButton2ActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        controller.onStepBack();
    }//GEN-LAST:event_backButtonActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        controller.setVisit(jComboBox1.getSelectedIndex());
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void preferenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preferenceActionPerformed
        // TODO add your handling code here:
        jButtonAttraversatoColor.setBackground(Config.getConfig().getUsedArrow());
        jButtonDefaultColor.setBackground(Config.getConfig().getDefaultArrow());
        jButtonSaturoColor.setBackground(Config.getConfig().getFilledArrow());
        jButtonSelezionatoColor.setBackground(Config.getConfig().getSelectedArrow());
        jDialog2.setVisible(true);
    }//GEN-LAST:event_preferenceActionPerformed

    private void DimTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DimTextActionPerformed
        // TODO add your handling code here:
        Config.getConfig().setDimText(Integer.parseInt(jComboBoxDimText.getItemAt(jComboBoxDimText.getSelectedIndex())));
        controller.saveConfig();
        update();
    }//GEN-LAST:event_DimTextActionPerformed

    private void defaultColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultColorActionPerformed
        // TODO add your handling code here:
        Color c = JColorChooser.showDialog(this, "Select color", Color.WHITE);
        jButtonDefaultColor.setBackground(c);
        Config.getConfig().setDefaultArrow(c);
        controller.saveConfig();
        update();
    }//GEN-LAST:event_defaultColorActionPerformed

    private void attraversatoColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attraversatoColorActionPerformed
        // TODO add your handling code here:
        Color c = JColorChooser.showDialog(this, "Select color", Color.WHITE);
        jButtonAttraversatoColor.setBackground(c);
        Config.getConfig().setUsedArrow(c);
        controller.saveConfig();
        update();
    }//GEN-LAST:event_attraversatoColorActionPerformed

    private void saturoColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saturoColorActionPerformed
        // TODO add your handling code here:
        Color c = JColorChooser.showDialog(this, "Select color", Color.WHITE);
        jButtonSaturoColor.setBackground(c);
        Config.getConfig().setFilledArrow(c);
        controller.saveConfig();
        update();
    }//GEN-LAST:event_saturoColorActionPerformed

    private void selezionatoColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selezionatoColorActionPerformed
        // TODO add your handling code here:
        Color c = JColorChooser.showDialog(this, "Select color", Color.WHITE);
        jButtonSelezionatoColor.setBackground(c);
        Config.getConfig().setSelectedArrow(c);
        controller.saveConfig();
        update();
    }//GEN-LAST:event_selezionatoColorActionPerformed

    private void jComboBoxDimCircleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDimCircleActionPerformed
        // TODO add your handling code here:
        Config.getConfig().setDimCircle(Integer.parseInt(jComboBoxDimCircle.getItemAt(jComboBoxDimCircle.getSelectedIndex())));
        controller.saveConfig();
        update();
    }//GEN-LAST:event_jComboBoxDimCircleActionPerformed

    private void jSliderPosTextStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderPosTextStateChanged
        // TODO add your handling code here:
        Config.getConfig().setPosText(jSliderPosText.getValue());
        controller.saveConfig();
        update();
    }//GEN-LAST:event_jSliderPosTextStateChanged

    private void jButtonSetDefCapacityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSetDefCapacityActionPerformed
        // TODO add your handling code here:
        if (!jTextField1.getText().equals("")) {
            int capacity = 0;
            try {
                capacity = Integer.parseInt(jTextField1.getText());
            } catch (NumberFormatException numberFormatException) {
                displayMessage("Error: Please enter a numeric value");
                return;
            }
            Config.getConfig().setFixedCapacity(capacity);
            controller.saveConfig();
        }
    }//GEN-LAST:event_jButtonSetDefCapacityActionPerformed

    private void jRadioButtonRandomCapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonRandomCapActionPerformed
        // TODO add your handling code here:
        jRadioButtonDefaultCap.setSelected(false);
        jTextField1.setEnabled(false);
        Config.getConfig().setRandomCapacity(true);
        controller.saveConfig();
    }//GEN-LAST:event_jRadioButtonRandomCapActionPerformed

    private void jRadioButtonDefaultCapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonDefaultCapActionPerformed
        // TODO add your handling code here:
        jRadioButtonRandomCap.setSelected(false);
        jTextField1.setEnabled(true);
        Config.getConfig().setRandomCapacity(false);
        controller.saveConfig();
    }//GEN-LAST:event_jRadioButtonDefaultCapActionPerformed

    private void jMenuItemExampleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExampleActionPerformed
        // TODO add your handling code here:
        controller.loadExample();
    }//GEN-LAST:event_jMenuItemExampleActionPerformed

    private void dragButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dragButtonActionPerformed
        // TODO add your handling code here:
        MODE = DRAG;
        rubberButton.setSelected(false);
        pencilButton.setSelected(false);
    }//GEN-LAST:event_dragButtonActionPerformed

    private void undoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoButtonActionPerformed
        // TODO add your handling code here:
        controller.restoreState(true);
    }//GEN-LAST:event_undoButtonActionPerformed

    private void redoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoButtonActionPerformed
        // TODO add your handling code here:
        controller.restoreState(false);
    }//GEN-LAST:event_redoButtonActionPerformed

    private void StrokeCirclejSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_StrokeCirclejSliderStateChanged
        // TODO add your handling code here:
        Config.getConfig().setStrokeCircle(StrokeCirclejSlider.getValue());
        controller.saveConfig();
        update();
    }//GEN-LAST:event_StrokeCirclejSliderStateChanged

    private void StrokeArrowjSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_StrokeArrowjSliderStateChanged
        // TODO add your handling code here:
        Config.getConfig().setStrokeArrow(StrokeArrowjSlider.getValue());
        controller.saveConfig();
        update();
    }//GEN-LAST:event_StrokeArrowjSliderStateChanged

    private void residualButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_residualButtonActionPerformed
        // TODO add your handling code here:
        Config.getConfig().setResitualMode(!Config.getConfig().getResidualMode());
        controller.saveConfig();
        update();
    }//GEN-LAST:event_residualButtonActionPerformed

    private void jMenuItemAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAboutActionPerformed
        // TODO add your handling code here:
        displayMessage("Created by Tú Đẹp Trai 2k tranhuytu242000@gmail.com");
    }//GEN-LAST:event_jMenuItemAboutActionPerformed

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        // TODO add your handling code here:
        controller.exit();
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    public boolean isPlaySelected() {
        return playButton.isSelected();
    }

    public void setUpPlayButton() {
        playButton.setSelected(false);
    }

    public void eraseCircle(Circle circle) {
        circles.remove(circle);
        controller.removeNode(circle);
        circle.removeArrows();
        controller.saveState();
        update();
    }

    public void eraseArrow(Arrow arrow) {
        arrow.getFrom().removeArrowFrom(arrow);
        arrow.getTo().removeArrowTo(arrow);
        controller.removeEdge(arrow);
        controller.saveState();
        update();
    }

    private void eraseShape(Point2D point) {
        for (Circle circle : circles) {
            if (circle.getShape().contains(point)) {
                eraseCircle(circle);
                break;
            } else {
                Arrow arrow = circle.checkForArrow(point);
                if (arrow != null) {
                    eraseArrow(arrow);
                    break;
                }
            }
        }
        update();
    }

    private Circle getSelectedCircle(Point2D point) {
        for (Circle circle : circles) {
            if (circle.getShape().contains(point)) {
                return circle;
            }
        }
        return null;
    }

    private Arrow getSelectedArrow(Point2D point) {
        for (Circle circle : circles) {
            Arrow arrow = circle.checkForArrow(point);
            if (arrow != null) {
                return arrow;
            }
        }
        return null;
    }

    public void update(Graphics g) {
        Graphics2D g2 = (Graphics2D) g;
        for (Circle circle : circles) {
            circle.draw(g2);
            circle.drawText(g2);
            circle.updateArrow();
            circle.drawArrows(g2);
        }
        Config.getConfig().setNeedUpdate(false);
    }

    public void update() {
        myPanel.repaint();
    }

    public void addCircle(Point point) {
        Circle circle = new Circle();
        circle.setFirstPoint(point);
        circles.add(circle);
        controller.addNode(circle);
        update();
    }

    private void addArrow(Circle circ) {
        if (controller.checkAddInverseArrow(shapeTmp.getName(), circ.getName())) {
            controller.saveState();
            return;
        }
        Arrow arrow = new Arrow(shapeTmp, circ);
        if (controller.addEdge(arrow)) {
            shapeTmp.addArrowFrom(arrow);
            circ.addArrowTo(arrow);
            controller.saveState();
            update();
        }
    }

    public void displayMessage(String str) {
        JOptionPane.showMessageDialog(this, str);
    }

    public int checkSave() {
        int response = JOptionPane.showConfirmDialog(
                null, "Changes have been made,\nDo you want to save",
                "Attention",
                JOptionPane.YES_NO_OPTION);
        if (response == 0) {
            saveGraph();
        }
        return response;
    }

    public ArrayList getCircles() {
        return circles;
    }

    public void setCircles(ArrayList array) {
        circles = array;
    }

    private File openGraph() {
        //I see the dialog box
        int risposta = chooser.showOpenDialog(this);
        if (risposta == JFileChooser.APPROVE_OPTION) {
            return chooser.getSelectedFile();
        }
        return null;
    }

    public void saveGraph() {

        int option2 = JOptionPane.NO_OPTION;
        File f = null;
        String str = null;
        while (option2 == JOptionPane.NO_OPTION)
        {

            int option = chooser.showSaveDialog(this);
            if (option == JFileChooser.APPROVE_OPTION)
            {
                try {

                    f = chooser.getSelectedFile();

                    str = f.getCanonicalPath();

                    if (f.exists()) {
                        option2 = JOptionPane.showConfirmDialog(this, "The file already exists\n'.\nDo you want to overwrite it?\n", "Overwrite\n", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                    } else {
                        option2 = JOptionPane.YES_OPTION;
                    }
                } catch (IOException | HeadlessException ex) {
                }
            } else {
                option2 = JOptionPane.CANCEL_OPTION;
            }
        }
        if (option2 == JOptionPane.YES_OPTION) {
            try {
                controller.save(str);
            } catch (JSONException ex) {
                Logger.getLogger(EdmondsKarpGui.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }

    private void setupUndoHotkeys() {
        String UNDO = "Undo action key";
        String REDO = "Redo action key";
        Action undoAction = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                controller.restoreState(true);
            }
        };
        Action redoAction = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                controller.restoreState(false);
            }
        };

        myPanel.getActionMap().put(UNDO, undoAction);
        myPanel.getActionMap().put(REDO, redoAction);

        InputMap[] inputMaps = new InputMap[]{
            myPanel.getInputMap(JComponent.WHEN_FOCUSED),
            myPanel.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT),
            myPanel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW),};
        for (InputMap i : inputMaps) {
            i.put(KeyStroke.getKeyStroke("control Z"), UNDO);
            i.put(KeyStroke.getKeyStroke("control Y"), REDO);
            i.put(KeyStroke.getKeyStroke(KeyEvent.VK_Z, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()), UNDO);
        }
    }

    public void updatePrefMenu() {
        jRadioButtonDefaultCap.setSelected(!Config.getConfig().isRandomCapacity());
        jRadioButtonRandomCap.setSelected(Config.getConfig().isRandomCapacity());
        if (!Config.getConfig().isRandomCapacity()) {
            jTextField1.setText(Config.getConfig().getFixedCapacity() + "");
            jTextField1.setEnabled(true);
        }
        jSliderPosText.setValue(Config.getConfig().getPosText());
        jComboBoxDimCircle.setSelectedItem(Config.getConfig().getDimCircle() + "");
        jComboBoxDimText.setSelectedItem(Config.getConfig().getDimText() + "");
        StrokeArrowjSlider.setValue((int) Config.getConfig().getStrokeArrow());
        StrokeCirclejSlider.setValue((int) Config.getConfig().getStrokeCircle());
    }

    public void resetLabel() {
        jLabelMin.setText("Min = 0");
        jLabelMaxFlow.setText("Flow = 0");
    }

    @Override
    public void update(Observable arg0, Object arg1) {
        if (arg0 instanceof Graph) {
            if ((int) arg1 == 1) {
                jLabelMaxFlow.setText("Flow = " + ((Graph) arg0).getMaxFlow());
            } else if ((int) arg1 == 0) {
                jLabelMin.setText("Min = " + ((Graph) arg0).getMinFlow());
            }
        }
    }

    private class WListener extends WindowAdapter {

        @Override
        public void windowClosing(WindowEvent e) {
            controller.exit();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // Generated using JFormDesigner Evaluation license - unknown
    private JMenuBar jMenuBar1;
    private JMenu jMenu1;
    private JMenuItem jMenuItem5;
    private JMenuItem jMenuItem1;
    private JMenuItem jMenuItem4;
    private JMenuItem jMenuItemExit;
    private JMenu jMenu2;
    private JMenuItem jMenuItemExample;
    private JMenuItem jMenuItem10;
    private JMenu jMenu3;
    private JMenuItem jMenuItemAbout;
    private JPanel jPanel1;
    private JToggleButton pencilButton;
    private JToggleButton rubberButton;
    private JToggleButton playButton;
    private JButton backButton;
    private JButton forwardButton;
    private JButton stopButton;
    private JButton runButton;
    private JComboBox<String> jComboBox1;
    private JToggleButton dragButton;
    private JButton undoButton;
    private JButton redoButton;
    private JToggleButton residualButton;
    private JLabel jLabelMin;
    private JLabel jLabelMaxFlow;
    private JPanel myPanel;
    private JPopupMenu jPopupMenu1;
    private JMenuItem jMenuItem2;
    private JMenuItem jMenuItem3;
    private JMenuItem jMenuItem6;
    private JPopupMenu jPopupMenu2;
    private JMenuItem jMenuItem7;
    private JMenuItem jMenuItem8;
    private JMenuItem jMenuItem9;
    private JDialog jDialog1;
    private JPanel jPanel2;
    private JLabel jLabel1;
    private JTextField jTextField2;
    private JButton jButton2;
    private JDialog jDialog2;
    private JTabbedPane jTabbedPane2;
    private JPanel jPanel3;
    private JTextField jTextField1;
    private JLabel jLabel2;
    private JLabel jLabel7;
    private JSlider jSliderPosText;
    private JButton jButtonSetDefCapacity;
    private JRadioButton jRadioButtonRandomCap;
    private JRadioButton jRadioButtonDefaultCap;
    private JPanel jPanel4;
    private JLabel jLabel3;
    private JLabel jLabel4;
    private JLabel jLabel5;
    private JLabel jLabel6;
    private JButton jButtonDefaultColor;
    private JButton jButtonAttraversatoColor;
    private JButton jButtonSaturoColor;
    private JLabel jLabel11;
    private JButton jButtonSelezionatoColor;
    private JPanel jPanel5;
    private JLabel jLabel8;
    private JComboBox<String> jComboBoxDimCircle;
    private JLabel jLabel9;
    private JComboBox<String> jComboBoxDimText;
    private JSlider StrokeCirclejSlider;
    private JSlider StrokeArrowjSlider;
    private JLabel jLabel10;
    private JLabel jLabel12;
    // End of variables declaration//GEN-END:variables
}

class MyPanel extends JPanel {

    private final EdmondsKarpGui gui;

    public MyPanel(EdmondsKarpGui gui) {
        this.gui = gui;
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        RenderingHints rh = new RenderingHints(
                RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON);
        ((Graphics2D) g).setRenderingHints(rh);
        gui.update(g);
    }
}
